
import sys
import os
from dotenv import load_dotenv

from tg_bot import init_db

load_dotenv()
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import logging
import html
import uuid
import json
import time
from typing import List, Optional, Dict, Any

from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove,
    InputMediaPhoto, InputMediaVideo, ParseMode
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–´
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
MOD_CHAT_ID = int(os.getenv("MOD_CHAT_ID"))
MAX_PHOTOS = 10
AGENT_CONTACT = "@Ultanovr"

CATEGORIES = {
    "1": "–£—Å–ª—É–≥–∏",
    "2": "–ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏",
    "3": "–ë—å—é—Ç–∏",
    "4": "–†–æ–∑–Ω–∏—Ü–∞",
    "5": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
    "6": "–û–±—â–µ–ø–∏—Ç",
    "7": "–û–ø—Ç",
    "8": "IT",
}

# ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚úÖ –ë–û–¢ –ò –î–ò–°–ü–ï–¢–ß–ï–†
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ‚úÖ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
pending_submissions: Dict[str, Dict[str, Any]] = {}
mod_rejection_state: Dict[int, str] = {}
referral_data: Dict[int, Dict] = {}
referral_invites: Dict[int, list] = {}

# ‚úÖ FSM STATES
class SellStates(StatesGroup):
    SELL_TITLE = State()
    SELL_PROFIT = State()
    SELL_MARKETING = State()
    SELL_EMPLOYEES = State()
    SELL_PREMISES = State()
    SELL_INCLUDED = State()
    SELL_EXTRA = State()
    SELL_TABLE = State()
    SELL_PHOTOS = State()
    SELL_CITY = State()
    SELL_ADDRESS = State()
    SELL_PRICE = State()
    SELL_CATEGORY = State()
    SELL_AGENT_CONFIRM = State()
    SELL_CONTACT_AGENT = State()
    SELL_PREVIEW = State()

class BuyStates(StatesGroup):
    BUY_BUDGET = State()
    BUY_CITY = State()
    BUY_CATEGORY = State()
    BUY_EXPERIENCE = State()
    BUY_PHONE = State()
    BUY_WHEN_CONTACT = State()

class ModStates(StatesGroup):
    MOD_REASON = State()

# ‚úÖ –§–£–ù–ö–¶–ò–ò –ü–û–ú–û–©–ù–ò–ö–ò
def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML –¥–ª—è Telegram"""
    return html.escape(str(text))

def format_number(value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"""
    try:
        num = int(value)
        return f"{num:,}".replace(",", " ")
    except (ValueError, TypeError):
        return str(value)

def safe_int(value: str) -> Optional[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
    try:
        return int(value)
    except:
        return None

def get_price_category(price_str: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–µ–Ω—ã"""
    try:
        price = int(price_str)
        if price <= 500000:
            return "#–î–æ500—Ç—ã—Å"
        elif price <= 1000000:
            return "#–î–æ1–º–ª–Ω"
        elif price <= 1500000:
            return "#–î–æ1_5–º–ª–Ω"
        elif price <= 2000000:
            return "#–î–æ2–º–ª–Ω"
        elif price <= 3000000:
            return "#–î–æ3–º–ª–Ω"
        elif price <= 5000000:
            return "#–î–æ5–º–ª–Ω"
        else:
            return "#–í—ã—à–µ5–º–ª–Ω"
    except (ValueError, TypeError):
        return ""

def is_subscribed_status(status: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    return status not in ("left", "kicked")

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        is_subscribed = is_subscribed_status(member.status)
        logger.info(f"User {user_id} subscription check: status={member.status}, subscribed={is_subscribed}")
        return is_subscribed
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False

# ‚úÖ –ö–õ–ê–í–ò–ê–¢–£–†–´
def make_start_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ü—Ä–æ–¥–∞—Ç—å", callback_data="start:sell"))
    kb.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data="start:buy"))
    return kb

def make_subscribe_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/goodbiz54"))
    kb.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
    return kb

def make_ready_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞)", callback_data="info:ready"))
    return kb

def make_back_restart_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
        InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="nav:restart")
    )
    return kb

def make_restart_only_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="nav:restart"))
    return kb

def make_skip_back_restart_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="sell:skip_current"))
    kb.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
        InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="nav:restart")
    )
    return kb

def make_done_back_restart_keyboard(done_callback: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=done_callback))
    kb.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
        InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="nav:restart")
    )
    return kb

def make_categories_keyboard(prefix="cat") -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    for i in range(1, 9):
        cat_name = CATEGORIES.get(str(i), f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {i}")
        kb.insert(InlineKeyboardButton(cat_name, callback_data=f"{prefix}:{i}"))
    return kb

def make_confirm_agent_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–î–∞", callback_data="sell:agree_agent"),
        InlineKeyboardButton("–ù–µ—Ç", callback_data="sell:no_agent")
    )
    return kb

def make_mod_inline(local_id: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"mod:publish:{local_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod:reject:{local_id}")
    )
    return kb

# =======================
# –ö–æ–º–∞–Ω–¥—ã
# =======================


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    """
    –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.
    –§–æ—Ä–º–∞—Ç: /start ref_USER_ID
    """
    try:
        user_id = message.from_user.id
        args = message.get_args()

        # ‚úÖ –£–ë–ò–†–ê–ï–ú –ö–ù–û–ü–ö–ò –° –ö–õ–ê–í–ò–ê–¢–£–†–´
        await message.answer(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...",
            reply_markup=ReplyKeyboardRemove()
        )

        # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        if args and args.startswith("ref_"):
            referrer_id = args.replace("ref_", "")
            try:
                referrer_id = int(referrer_id)

                if referrer_id == user_id:
                    await message.answer(
                        "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è! üòÑ",
                        reply_markup=make_start_keyboard()
                    )
                    return  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

                if user_id in referral_data:
                    await message.answer(
                        "–í—ã —É–∂–µ –ø–æ–º–æ–≥–ª–∏ –∫–æ–º—É-—Ç–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å! üéÅ\n\n"
                        "–•–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                        reply_markup=make_start_keyboard()
                    )
                    return  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

                subscribed = await check_subscription(user_id)
                if not subscribed:
                    await message.answer(
                        "‚ùå –ß—Ç–æ–±—ã –ø–æ–º–æ—á—å –¥—Ä—É–≥—É, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!\n\n"
                        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start –µ—â—ë —Ä–∞–∑.",
                        reply_markup=make_subscribe_keyboard()
                    )
                    return  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

                # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
                referral_data[user_id] = {"invited_by": referrer_id}

                if referrer_id not in referral_invites:
                    referral_invites[referrer_id] = []
                referral_invites[referrer_id].append(user_id)

                count = len(referral_invites[referrer_id])

                # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
                try:
                    await bot.send_message(
                        referrer_id,
                        f"‚úÖ –í–∞—à –¥—Ä—É–≥ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–∞–ª START!\n"
                        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count}/5"
                    )

                    # ‚úÖ –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                    if count >= 5:
                        await bot.send_message(
                            referrer_id,
                            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ 5 –¥—Ä—É–∑–µ–π.\n"
                            "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!"
                        )

                        try:
                            state_proxy = dp.current_state(chat=referrer_id, user=referrer_id)

                            if state_proxy is None:
                                logger.warning(f"‚ö†Ô∏è state_proxy is None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {referrer_id}")
                                await bot.send_message(
                                    referrer_id,
                                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):"
                                )
                            else:
                                user_data = await state_proxy.get_data()

                                if user_data.get("waiting_for_invites"):
                                    if not user_data.get("contact"):
                                        await bot.send_message(
                                            referrer_id,
                                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):"
                                        )
                                        await state_proxy.set_state(SellStates.SELL_CONTACT_AGENT)
                                    else:
                                        await finalize_and_send_to_moderation(
                                            referrer_id,
                                            state_proxy,
                                            invited=True
                                        )

                        except Exception as e:
                            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ state_proxy –¥–ª—è {referrer_id}: {e}")
                            await bot.send_message(
                                referrer_id,
                                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                            )

                except Exception as e:
                    logger.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")

                # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer(
                    "üéâ –°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–º–æ–≥–ª–∏ –¥—Ä—É–≥—É –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å\n"
                    "‚Ä¢ –ù–∞–π—Ç–∏ –≥–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
                    reply_markup=make_start_keyboard()
                )
                return  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏

            except ValueError:
                logger.warning(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {args}")
                pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É —Å—Ç–∞—Ä—Ç—É

        # ‚úÖ –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç (–±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏)
        kb = make_start_keyboard()
        await message.answer(
            "–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å?",
            reply_markup=kb
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /start: %s", e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start.")

@dp.message_handler(commands=["reset"])
async def cmd_reset(message: types.Message, state: FSMContext):
    """
    –°–±—Ä–æ—Å FSM –∏ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        await state.finish()
        await message.answer("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ /start.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ /reset: %s", e)
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")


# =======================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: –ù–∞–∑–∞–¥ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
# =======================


@dp.callback_query_handler(lambda c: c.data == "nav:back", state="*")
async def nav_back_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –¥—É–±–ª–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥"""
    try:
        current_state = await state.get_state()

        if not current_state:
            await callback_query.answer("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        previous_state = await get_previous_state(current_state)

        if previous_state is None:
            await callback_query.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥, –Ω–∞–∑–∞–¥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–µ–ª—å–∑—è")
            return

        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await bot.delete_message(
                callback_query.message.chat.id,
                callback_query.message.message_id
            )
        except Exception:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å - –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await previous_state.set()

        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥—É–±–ª–∏—Ä—É–µ–º —à–∞–≥)
        await send_state_question(
            callback_query.from_user.id,
            str(previous_state),
            state
        )

        await callback_query.answer("‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ nav:back: %s", e)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥")


@dp.callback_query_handler(lambda c: c.data == "nav:restart", state="*")
async def nav_restart_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞'"""
    try:
        await state.finish()

        kb = make_start_keyboard()
        await bot.send_message(
            callback_query.from_user.id,
            "üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å?",
            reply_markup=kb
        )

        await callback_query.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ nav:restart: %s", e)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")


@dp.callback_query_handler(lambda c: c.data == "sell:skip_current", state=SellStates)
async def sell_skip_current_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        current_state = await state.get_state()

        if current_state == "SellStates:SELL_MARKETING":
            await state.update_data(marketing="")
            await SellStates.SELL_EMPLOYEES.set()
            await bot.send_message(
                callback_query.from_user.id,
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –§–û–¢, —Å—Ç–∞–∂, –¥–æ–ª–∂–Ω–æ—Å—Ç–∏):",
                reply_markup=make_back_restart_keyboard()
            )

        elif current_state == "SellStates:SELL_EXTRA":
            await state.update_data(extra="")
            await SellStates.SELL_TABLE.set()
            await bot.send_message(
                callback_query.from_user.id,
                "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (—Ñ–∞–π–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                reply_markup=make_done_back_restart_keyboard("sell:photos_done")
            )

        await callback_query.answer("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ sell:skip_current: %s", e)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ")



# =======================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ Sell/Buy
# =======================

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("start:"))
async def process_start_choice(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data.split(":")[1]
    user_id = callback_query.from_user.id

    if action == "sell":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        try:
            subscribed = await check_subscription(user_id)
            if not subscribed:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(pending_action="sell")
                await callback_query.answer()
                await bot.send_message(
                    user_id,
                    "–ß—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @goodbiz54",
                    reply_markup=make_subscribe_keyboard()
                )
                return
            else:
                # –ü–æ–¥–ø–∏—Å–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                text = (
                    "–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"

                    "1. –§–∏–Ω–∞–Ω—Å–æ–≤—É—é (–ó–∞–ø–æ–ª–Ω–∏—Ç–µ <a href=\"https://docs.google.com/spreadsheets/d/1Vcn68ThO7yEWCQdLTZAsWVQc5c-V19B0wNLo0zIx_og/edit?gid=0#gid=0\">—Ç–∞–±–ª–∏—Ü—É</a>)\n"
                    "2. –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é (–µ—Å–ª–∏ –≤ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ)\n"
                    "3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö\n"
                    "4. –§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –±–∏–∑–Ω–µ—Å–∞ (—Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–µ –∫—Ä—É–∂–∫–∏)\n"
                    "5. –û—Ü–µ–Ω–∏—Ç–µ –±–∏–∑–Ω–µ—Å–∞ (–æ–±—ã—á–Ω–æ 10‚Äì18 –º–µ—Å—è—Ü–µ–≤, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏–∑–Ω–µ—Å–∞ –∏ –∏–º–µ—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–æ–≤)\n"
                    "6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—é (–∞—Ä–µ–Ω–¥–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –ø–ª–æ—â–∞–¥—å, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏)\n"
                    "7. –°–æ—Å—Ç–∞–≤ –±–∏–∑–Ω–µ—Å–∞ (–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ/–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã)\n"
                    "8. –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏—Å—Ç–æ—Ä–∏—è, –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏)\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞)' –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
                )
                await bot.send_message(
                    user_id,
                    text,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True,
                    reply_markup=make_ready_keyboard()
                )
                await callback_query.answer()
                return
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ç–∫–µ sell: %s", e)
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    elif action == "buy":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        try:
            subscribed = await check_subscription(user_id)
            if not subscribed:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(pending_action="buy")
                await callback_query.answer()
                await bot.send_message(
                    user_id,
                    "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @goodbiz54",
                    reply_markup=make_subscribe_keyboard()
                )
                return
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º FSM –æ–ø—Ä–æ—Å–∞ –ø–æ–∫—É–ø–∫–∏
                await bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?")
                await BuyStates.BUY_BUDGET.set()
                await callback_query.answer()
                return
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ç–∫–µ buy: %s", e)
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"

# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def process_check_sub(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    try:
        subscribed = await check_subscription(user_id)
        if subscribed:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            action = data.get("pending_action")  # "sell" –∏–ª–∏ "buy"

            if action == "sell":
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                text = (
                    "–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"

                    "1. –§–∏–Ω–∞–Ω—Å–æ–≤—É—é (–ó–∞–ø–æ–ª–Ω–∏—Ç–µ <a href=\"https://docs.google.com/spreadsheets/d/1Vcn68ThO7yEWCQdLTZAsWVQc5c-V19B0wNLo0zIx_og/edit?gid=0#gid=0\">—Ç–∞–±–ª–∏—Ü—É</a>)\n"
                    "2. –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é (–µ—Å–ª–∏ –≤ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ)\n"
                    "3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö\n"
                    "4. –§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –±–∏–∑–Ω–µ—Å–∞ (—Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–µ –∫—Ä—É–∂–∫–∏)\n"
                    "5. –û—Ü–µ–Ω–∏—Ç–µ –±–∏–∑–Ω–µ—Å–∞ (–æ–±—ã—á–Ω–æ 10‚Äì18 –º–µ—Å—è—Ü–µ–≤, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏–∑–Ω–µ—Å–∞ –∏ –∏–º–µ—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–æ–≤)\n"
                    "6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—é (–∞—Ä–µ–Ω–¥–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –ø–ª–æ—â–∞–¥—å, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏)\n"
                    "7. –°–æ—Å—Ç–∞–≤ –±–∏–∑–Ω–µ—Å–∞ (–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ/–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã)\n"
                    "8. –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏—Å—Ç–æ—Ä–∏—è, –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏)\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞)' –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
                )
                await bot.send_message(
                    user_id,
                    text,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True,
                    reply_markup=make_ready_keyboard()
                )

            elif action == "buy":
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                await bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?")
                await BuyStates.BUY_BUDGET.set()

            else:
                # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await bot.send_message(
                    user_id,
                    "–û—Ç–ª–∏—á–Ω–æ ‚Äî –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º.\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å?",
                    reply_markup=make_start_keyboard()
                )

            # ‚úÖ –û—á–∏—â–∞–µ–º pending_action
            await state.update_data(pending_action=None)

        else:
            await bot.send_message(
                user_id,
                "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.",
                reply_markup=make_subscribe_keyboard()
            )
        await callback_query.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ check_sub: %s", e)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
# =======================
# –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ Sell
# =======================
@dp.callback_query_handler(lambda c: c.data == "info:ready")
async def info_ready(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await state.update_data(photos=[], photos_metas=[], video=None)
        await bot.send_message(user_id, "–¢–æ–≥–¥–∞ –Ω–∞—á–Ω—ë–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        await SellStates.SELL_TITLE.set()
        await callback_query.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ info_ready: %s", e)
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# =======================
# –ù–∞–≤–∏–≥–∞—Ü–∏—è: –ù–∞–∑–∞–¥ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
# =======================

# –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
SELL_STATES_ORDER = [
    None,  # –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–ª—è SELL_TITLE
    SellStates.SELL_TITLE,
    SellStates.SELL_PROFIT,
    SellStates.SELL_MARKETING,
    SellStates.SELL_EMPLOYEES,
    SellStates.SELL_PREMISES,
    SellStates.SELL_INCLUDED,
    SellStates.SELL_EXTRA,
    SellStates.SELL_TABLE,
    SellStates.SELL_PHOTOS,
    SellStates.SELL_CITY,
    SellStates.SELL_PRICE,
    SellStates.SELL_CATEGORY,
]

BUY_STATES_ORDER = [
    None,  # –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–ª—è BUY_BUDGET
    BuyStates.BUY_BUDGET,
    BuyStates.BUY_CITY,
    BuyStates.BUY_CATEGORY,
    BuyStates.BUY_EXPERIENCE,
    BuyStates.BUY_PHONE,
    BuyStates.BUY_WHEN_CONTACT,
]


async def get_previous_state(current_state_name: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º flow –Ω–∞—Ö–æ–¥–∏–º—Å—è
    if "SELL" in current_state_name:
        states_map = {
            "SellStates:SELL_PROFIT": SellStates.SELL_TITLE,
            "SellStates:SELL_MARKETING": SellStates.SELL_PROFIT,
            "SellStates:SELL_EMPLOYEES": SellStates.SELL_MARKETING,
            "SellStates:SELL_PREMISES": SellStates.SELL_EMPLOYEES,
            "SellStates:SELL_INCLUDED": SellStates.SELL_PREMISES,
            "SellStates:SELL_EXTRA": SellStates.SELL_INCLUDED,
            "SellStates:SELL_TABLE": SellStates.SELL_EXTRA,
            "SellStates:SELL_PHOTOS": SellStates.SELL_TABLE,
            "SellStates:SELL_CITY": SellStates.SELL_PHOTOS,
            "SellStates:SELL_PRICE": SellStates.SELL_CITY,
            "SellStates:SELL_CATEGORY": SellStates.SELL_PRICE,
            "SellStates:SELL_ADDRESS": SellStates.SELL_CITY,
        }
    elif "BUY" in current_state_name:
        states_map = {
            "BuyStates:BUY_CITY": BuyStates.BUY_BUDGET,
            "BuyStates:BUY_CATEGORY": BuyStates.BUY_CITY,
            "BuyStates:BUY_EXPERIENCE": BuyStates.BUY_CATEGORY,
            "BuyStates:BUY_PHONE": BuyStates.BUY_EXPERIENCE,
            "BuyStates:BUY_WHEN_CONTACT": BuyStates.BUY_PHONE,
        }
    else:
        return None

    return states_map.get(current_state_name)


async def send_state_question(user_id: int, state_name: str, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    data = await state.get_data()

    # SELL states
    if state_name == "SellStates:SELL_TITLE":
        await bot.send_message(user_id, "–¢–æ–≥–¥–∞ –Ω–∞—á–Ω—ë–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
                               reply_markup=make_restart_only_keyboard())

    elif state_name == "SellStates:SELL_PROFIT":
        await bot.send_message(user_id, "–ö–∞–∫–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å? (–î–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–µ–π)", reply_markup=make_back_restart_keyboard())

    elif state_name == "SellStates:SELL_MARKETING":
        await bot.send_message(user_id, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤):",
                               reply_markup=make_skip_back_restart_keyboard())

    elif state_name == "SellStates:SELL_EMPLOYEES":
        await bot.send_message(user_id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ, –§–û–¢, —Å—Ç–∞–∂, –¥–æ–ª–∂–Ω–æ—Å—Ç–∏):",
                               reply_markup=make_back_restart_keyboard())

    elif state_name == "SellStates:SELL_PREMISES":
        await bot.send_message(user_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–º–µ—â–µ–Ω–∏–∏ ((—Å—É–±)–∞—Ä–µ–Ω–¥–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –ø–ª–æ—â–∞–¥—å,–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ, —Ä–µ–º–æ–Ω—Ç –∏ —Ç.–¥.):",
                               reply_markup=make_back_restart_keyboard())

    elif state_name == "SellStates:SELL_INCLUDED":
        await bot.send_message(user_id, "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞? (–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –∏ –Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ, –æ–±–µ—Å–ø–µ—á–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂, —Ç–æ–≤–∞—Ä–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, –≤–∞—à–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ —Ç.–¥.)", reply_markup=make_back_restart_keyboard())

    elif state_name == "SellStates:SELL_EXTRA":
        await bot.send_message(user_id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏—Å—Ç–æ—Ä–∏—è –±–∏–∑–Ω–µ—Å–∞, –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏, –¥–æ–ø. –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏):",
                               reply_markup=make_back_restart_keyboard())

    elif state_name == "SellStates:SELL_TABLE":
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="sell:skip_table"))
        kb.add(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="nav:restart")
        )
        await bot.send_message(user_id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (—Ñ–∞–π–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                               reply_markup=kb)

    elif state_name == "SellStates:SELL_PHOTOS":
        photos_count = len(data.get("photos", []))
        await bot.send_message(
            user_id,
            f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 10) –∏/–∏–ª–∏ –≤–∏–¥–µ–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {photos_count}/{MAX_PHOTOS}\n\n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=make_done_back_restart_keyboard("sell:photos_done")
        )

    elif state_name == "SellStates:SELL_CITY":
        await bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫):",
                               reply_markup=make_back_restart_keyboard())

    elif state_name == "SellStates:SELL_PRICE":
        await bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1250700):",
                               reply_markup=make_back_restart_keyboard())

    elif state_name == "SellStates:SELL_CATEGORY":
        kb = make_categories_keyboard()
        kb.row(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="nav:restart")
        )
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

    # BUY states
    elif state_name == "BuyStates:BUY_BUDGET":
        await bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?", reply_markup=make_restart_only_keyboard())

    elif state_name == "BuyStates:BUY_CITY":
        await bot.send_message(user_id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ? (–ù–∞–ø–∏—à–∏—Ç–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)",
                               reply_markup=make_back_restart_keyboard())

    elif state_name == "BuyStates:BUY_CATEGORY":
        kb = make_categories_keyboard(prefix="buycat")
        kb.row(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="nav:restart")
        )
        await bot.send_message(user_id, "–ö–∞–∫–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ? –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)


    elif state_name == "BuyStates:BUY_EXPERIENCE":

        await bot.send_message(user_id, "–ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç –≤ –±–∏–∑–Ω–µ—Å–µ? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ:",

                               reply_markup=make_back_restart_keyboard())


    elif state_name == "BuyStates:BUY_PHONE":

        await bot.send_message(user_id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=make_back_restart_keyboard())


    elif state_name == "BuyStates:BUY_WHEN_CONTACT":

        await bot.send_message(user_id, "–ö–æ–≥–¥–∞ –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è?", reply_markup=make_back_restart_keyboard())


# =======================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–¥–∞–∂–∏ (–ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º)
# =======================

@dp.message_handler(state=SellStates.SELL_TITLE, content_types=types.ContentTypes.TEXT)
async def sell_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await SellStates.SELL_PROFIT.set()
    await message.answer(
        "–ö–∞–∫–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å? (–î–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–µ–π)",
        reply_markup=make_back_restart_keyboard()
    )

@dp.message_handler(state=SellStates.SELL_PROFIT, content_types=types.ContentTypes.TEXT)
async def sell_profit(message: types.Message, state: FSMContext):
    val = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if safe_int(val) is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –ø—Ä–∏–º–µ—Ä: 150000")
        return

    await state.update_data(profit=int(val))
    await SellStates.SELL_MARKETING.set()
    await message.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤):",
        reply_markup=make_skip_back_restart_keyboard()
    )


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥)
@dp.message_handler(state=SellStates.SELL_MARKETING, content_types=types.ContentTypes.TEXT)
async def process_marketing_text(message: types.Message, state: FSMContext):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if message.text in ["–ù–∞–∑–∞–¥", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"]:
        return

    await state.update_data(marketing=message.text.strip())
    await SellStates.SELL_EMPLOYEES.set()
    await message.answer(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –§–û–¢, —Å—Ç–∞–∂, –¥–æ–ª–∂–Ω–æ—Å—Ç–∏):",
        reply_markup=make_back_restart_keyboard()
    )


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"

@dp.message_handler(state=SellStates.SELL_EMPLOYEES, content_types=types.ContentTypes.TEXT)
async def sell_employees(message: types.Message, state: FSMContext):
    await state.update_data(employees=message.text.strip())
    await SellStates.SELL_PREMISES.set()
    await message.answer(
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–º–µ—â–µ–Ω–∏–∏ ((—Å—É–±)–∞—Ä–µ–Ω–¥–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –ø–ª–æ—â–∞–¥—å,–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ, —Ä–µ–º–æ–Ω—Ç –∏ —Ç.–¥.):",
        reply_markup=make_back_restart_keyboard()
    )


@dp.message_handler(state=SellStates.SELL_PREMISES, content_types=types.ContentTypes.TEXT)
async def sell_premises(message: types.Message, state: FSMContext):
    await state.update_data(premises=message.text.strip())
    await SellStates.SELL_INCLUDED.set()
    await message.answer(
        "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞? (–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –∏ –Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ, –æ–±–µ—Å–ø–µ—á–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂, —Ç–æ–≤–∞—Ä–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, –≤–∞—à–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ —Ç.–¥.)",
        reply_markup=make_back_restart_keyboard()
    )


@dp.message_handler(state=SellStates.SELL_INCLUDED, content_types=types.ContentTypes.TEXT)
async def sell_included(message: types.Message, state: FSMContext):
    await state.update_data(included=message.text.strip())
    await SellStates.SELL_EXTRA.set()
    await message.answer(
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏—Å—Ç–æ—Ä–∏—è –±–∏–∑–Ω–µ—Å–∞, –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏, –¥–æ–ø. –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏):",
        reply_markup=make_back_restart_keyboard()
    )


@dp.message_handler(state=SellStates.SELL_EXTRA, content_types=types.ContentTypes.TEXT)
async def sell_extra(message: types.Message, state: FSMContext):
    await state.update_data(extra=message.text.strip())
    await SellStates.SELL_TABLE.set()

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="sell:skip_table"))
    kb.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
        InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="nav:restart")
    )

    await message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (—Ñ–∞–π–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'(–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è).",
        reply_markup=kb
    )


@dp.message_handler(state=SellStates.SELL_TABLE, content_types=types.ContentTypes.DOCUMENT)
async def sell_table_file(message: types.Message, state: FSMContext):
    file = message.document
    await state.update_data(table=file.file_id, table_name=file.file_name)
    await SellStates.SELL_PHOTOS.set()
    await message.answer(
        "–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 10) –∏/–∏–ª–∏ –≤–∏–¥–µ–æ –±–µ–∑ –∫—Ä—É–≥–ª–∏—à–∫–æ–≤ –¢–ì. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=make_done_back_restart_keyboard("sell:photos_done")
    )


@dp.callback_query_handler(lambda c: c.data == "sell:skip_table", state=SellStates.SELL_TABLE)
async def sell_skip_table(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(table=None)
    await SellStates.SELL_PHOTOS.set()
    await bot.send_message(
        callback_query.from_user.id,
        "–•–æ—Ä–æ—à–æ. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 10) –∏/–∏–ª–∏ –≤–∏–¥–µ–æ –±–µ–∑ –∫—Ä—É–≥–ª–∏—à–∫–æ–≤ –¢–ì. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=make_done_back_restart_keyboard("sell:photos_done")
    )
    await callback_query.answer()


@dp.message_handler(state=SellStates.SELL_PHOTOS, content_types=types.ContentTypes.PHOTO)
async def sell_photos_handler(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        photos: List[str] = data.get("photos", [])
        file_id = message.photo[-1].file_id

        if len(photos) >= MAX_PHOTOS:
            await message.answer(f"–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º {MAX_PHOTOS} —Ñ–æ—Ç–æ.")
            return

        photos.append(file_id)
        await state.update_data(photos=photos)
        await message.answer(
            f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ({len(photos)}/{MAX_PHOTOS}).",
            reply_markup=make_done_back_restart_keyboard("sell:photos_done")
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å —Ñ–æ—Ç–æ.")


@dp.message_handler(state=SellStates.SELL_PHOTOS, content_types=types.ContentTypes.VIDEO)
async def sell_video_handler(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        if data.get("video"):
            await message.answer("–í–∏–¥–µ–æ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ.")
            return

        await state.update_data(video=message.video.file_id)
        await message.answer(
            "–í–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ.",
            reply_markup=make_done_back_restart_keyboard("sell:photos_done")
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤–∏–¥–µ–æ.")


@dp.message_handler(state=SellStates.SELL_PHOTOS, content_types=types.ContentTypes.VIDEO_NOTE)
async def sell_video_note_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–æ–≤ (video_note)
    """
    try:
        data = await state.get_data()
        if data.get("video_note"):
            await message.answer("–í–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω.")
            return

        await state.update_data(video_note=message.video_note.file_id)
        await message.answer(
            "üé• –í–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ –ø—Ä–∏–Ω—è—Ç.",
            reply_markup=make_done_back_restart_keyboard("sell:photos_done")
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–∞: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫.")

@dp.callback_query_handler(lambda c: c.data == "sell:photos_done", state=SellStates.SELL_PHOTOS)
async def sell_photos_done(callback_query: types.CallbackQuery, state: FSMContext):
    await SellStates.SELL_CITY.set()
    await bot.send_message(
        callback_query.from_user.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫):",
        reply_markup=make_back_restart_keyboard()
    )
    await callback_query.answer()

@dp.message_handler(state=SellStates.SELL_CITY, content_types=types.ContentTypes.TEXT)
async def sell_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    await state.update_data(city=city)
    # üëâ –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
    await SellStates.SELL_ADDRESS.set()
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –±–∏–∑–Ω–µ—Å–∞:",
        reply_markup=make_back_restart_keyboard()
    )

@dp.message_handler(state=SellStates.SELL_ADDRESS, content_types=types.ContentTypes.TEXT)
async def sell_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    # üëâ –ü–æ—Å–ª–µ –∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–Ω–µ
    await SellStates.SELL_PRICE.set()
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1250700):",
        reply_markup=make_back_restart_keyboard()
    )

@dp.message_handler(state=SellStates.SELL_PRICE, content_types=types.ContentTypes.TEXT)
async def sell_price(message: types.Message, state: FSMContext):
    val = message.text.strip()
    if safe_int(val) is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –ø—Ä–∏–º–µ—Ä: 1250700")
        return

    await state.update_data(price=val)
    await SellStates.SELL_CATEGORY.set()

    kb = make_categories_keyboard()
    kb.row(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
        InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="nav:restart")
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)


# –°—Ç—Ä–æ–∫–∞ ~1142-1165

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("cat:"), state=SellStates.SELL_CATEGORY)
async def sell_category(callback_query: types.CallbackQuery, state: FSMContext):
    cat_idx = callback_query.data.split(":")[1]
    await state.update_data(category_idx=cat_idx)

    await SellStates.SELL_PREVIEW.set()

    data = await state.get_data()
    preview_text = build_sell_preview(data)

    user_id = callback_query.from_user.id

    # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    photos = data.get("photos", [])
    video = data.get("video")
    video_note = data.get("video_note")
    table = data.get("table")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É (—Ñ–æ—Ç–æ + –≤–∏–¥–µ–æ)
    if photos or video:
        media_group = []
        for photo_id in photos[:10]:
            media_group.append(InputMediaPhoto(media=photo_id))
        if video and len(media_group) < 10:
            media_group.append(InputMediaVideo(media=video))

        if media_group:
            try:
                await bot.send_media_group(user_id, media_group)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫
    if video_note:
        try:
            await bot.send_video_note(user_id, video_note)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–∞: {e}")

    # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    if table:
        try:
            await bot.send_document(
                user_id,
                table,
                caption="üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="preview:confirm"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="preview:cancel")
    )

    await bot.send_message(
        user_id,
        preview_text,
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ -> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("preview:"), state=SellStates.SELL_PREVIEW)
async def preview_actions(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data.split(":")[1]
    user_id = callback_query.from_user.id

    if action == "confirm":
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ä–µ–¥–Ω–∏—á–µ—Å—Ç–≤–∞
        await SellStates.SELL_AGENT_CONFIRM.set()
        await bot.send_message(
            user_id,
            "–ú—ã –≥–æ—Ç–æ–≤—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –æ–¥–Ω–∞–∫–æ –≤ —Å–ª—É—á–∞–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º—ã –≤—ã—Å—Ç—É–ø–∏–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?",
            reply_markup=make_confirm_agent_keyboard()
        )
    else:
        await state.finish()
        await bot.send_message(user_id, "–û–∫–µ–π, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî /start.")

    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ
@dp.callback_query_handler(lambda c: c.data == "sell:agree_agent", state=SellStates.SELL_AGENT_CONFIRM)
async def sell_agree_agent(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(with_agent=True)
    await SellStates.SELL_CONTACT_AGENT.set()
    await bot.send_message(callback_query.from_user.id, "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):")
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "sell:no_agent", state=SellStates.SELL_AGENT_CONFIRM)
async def sell_no_agent(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(with_agent=False)
    await SellStates.SELL_CONTACT_AGENT.set()
    await bot.send_message(callback_query.from_user.id, "–•–æ—Ä–æ—à–æ. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):")
    await callback_query.answer()


# ‚úÖ –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π
@dp.message_handler(state=SellStates.SELL_CONTACT_AGENT, content_types=types.ContentTypes.TEXT)
async def sell_contact_agent_received(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(contact=message.text.strip())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ª–∏ –Ω–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ
    if data.get("with_agent"):
        # –ü—É—Ç—å —Å –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∏–¥–∫—É
        await message.answer(
            "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Å–∫–∏–¥–∫—É 20% –Ω–∞ –Ω–∞—à—É –∫–æ–º–∏—Å—Å–∏—é, –µ—Å–ª–∏ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π –≤ –∫–∞–Ω–∞–ª.",
            reply_markup=make_agent_discount_keyboard()
        )
    else:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—É—Ç—å –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏—á–µ—Å—Ç–≤–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–∞–Ω–∞–ª
        await message.answer(
            "–û—á–µ–Ω—å –∂–∞–ª—å! –ù–æ –º—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏–º –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, "
            "–≤–∞–º –≤—Å–µ–≥–æ –ª–∏—à—å –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à –∫–∞–Ω–∞–ª. –°–æ–≥–ª–∞—Å–Ω—ã?",
            reply_markup=make_noagent_keyboard()
        )

# noagent flow: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("noagent:"), state=SellStates)
async def noagent_choice(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data.split(":")[1]
    user_id = callback_query.from_user.id

    if action == "will_invite":
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ö–ê–ù–ê–õ + —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        channel_username = "goodbiz54"
        bot_username = (await bot.get_me()).username

        channel_link = f"https://t.me/{channel_username}"
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"

        invite_text = (
            f"–ü—Ä–∏–≤–µ—Ç! –ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –¢–ì –∫–∞–Ω–∞–ª, —Ç—É—Ç –ø—Ä–æ–¥–∞—é—Ç –∏ –ø–æ–∫—É–ø–∞—é—Ç –≥–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å. "
            f"–Ø —Å–≤–æ–π —Ç—É–¥–∞ –≤—ã—Å—Ç–∞–≤–∏–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–æ—á—É –±–æ–Ω—É—Å –∑–∞–±—Ä–∞—Ç—å üéÅ\n\n"
            f"üëâ –ö–∞–Ω–∞–ª: {channel_link}\n"
            f"üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç': {referral_link}"
        )

        await state.update_data(
            invite_text=invite_text,
            invited=True,
            discount=False,
            referral_link=referral_link,
            channel_link=channel_link,
            waiting_for_invites=True
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        if user_id not in referral_invites:
            referral_invites[user_id] = []

        await bot.send_message(
            user_id,
            f"üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏ 5 –¥—Ä—É–∑—å—è–º:\n\n{invite_text}\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: 0/5",
            reply_markup=make_agent_invite_keyboard()
        )
        await callback_query.answer()

    else:  # noagent:decline
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        await state.update_data(invited=False, discount=False)
        await state.update_data(rejected_all=True)
        await finalize_and_send_to_moderation(user_id, state, invited=False)
        await callback_query.answer("–•–æ—Ä–æ—à–æ. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≥–µ–Ω—Ç:will_invite / agent:no_discount
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("agent:"), state=SellStates)
async def agent_choice(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data.split(":")[1]
    user_id = callback_query.from_user.id

    if action == "will_invite":
        channel_username = "goodbiz54"
        bot_username = (await bot.get_me()).username

        channel_link = f"https://t.me/{channel_username}"
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"

        invite_text = (
            f"–ü—Ä–∏–≤–µ—Ç! –ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –¢–ì –∫–∞–Ω–∞–ª, —Ç—É—Ç –ø—Ä–æ–¥–∞—é—Ç –∏ –ø–æ–∫—É–ø–∞—é—Ç –≥–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å. "
            f"–Ø —Å–≤–æ–π —Ç—É–¥–∞ –≤—ã—Å—Ç–∞–≤–∏–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–æ—á—É –±–æ–Ω—É—Å –∑–∞–±—Ä–∞—Ç—å üéÅ\n\n"
            f"üëâ –ö–∞–Ω–∞–ª: {channel_link}\n"
            f"üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç': {referral_link}"
        )

        await state.update_data(
            invite_text=invite_text,
            discount=True,
            invited=True,
            referral_link=referral_link,
            channel_link=channel_link,
            # –ö–õ–Æ–ß–ï–í–û–ï: –≤ –∞–≥–µ–Ω—Ç—Å–∫–æ–π –≤–µ—Ç–∫–µ –≤–µ—Ä–∏–º –Ω–∞ —Å–ª–æ–≤–æ, –Ω–µ —Å—á–∏—Ç–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            waiting_for_invites=False,
            trust_agent_invites=True
        )

        await bot.send_message(
            user_id,
            f"üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏ –¥—Ä—É–∑—å—è–º:\n\n{invite_text}\n\n"
            f"–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏–ª¬ª.",
            reply_markup=make_agent_invite_keyboard()
        )
        await callback_query.answer()

    elif action == "no_discount":
        await state.update_data(discount=False, invited=False)
        # –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ç–∞–∫—Ç (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω), –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Ä–∞–∑—É
        data = await state.get_data()
        if not data.get("contact"):
            await SellStates.SELL_CONTACT_AGENT.set()
            await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):")
        else:
            await finalize_and_send_to_moderation(user_id, state, invited=False)
        await callback_query.answer("–°–ø–∞—Å–∏–±–æ! –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

# noagent flow: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å" –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å" –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data == "invite:copy", state=SellStates)
async def invite_copy(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    data = await state.get_data()
    channel_link = data.get("channel_link", "")
    referral_link = data.get("referral_link", "")

    if not channel_link or not referral_link:
        await callback_query.answer("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    await bot.send_message(
        callback_query.from_user.id,
        "üìã **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º:**"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invite_text = (
        f"–ü—Ä–∏–≤–µ—Ç! –ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –¢–ì –∫–∞–Ω–∞–ª, —Ç—É—Ç –ø—Ä–æ–¥–∞—é—Ç –∏ –ø–æ–∫—É–ø–∞—é—Ç –≥–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å. "
        f"–Ø —Å–≤–æ–π —Ç—É–¥–∞ –≤—ã—Å—Ç–∞–≤–∏–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–æ—á—É –±–æ–Ω—É—Å –∑–∞–±—Ä–∞—Ç—å üéÅ"
    )
    await bot.send_message(callback_query.from_user.id, invite_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    await bot.send_message(
        callback_query.from_user.id,
        f"üëâ **–ö–∞–Ω–∞–ª:**\n{channel_link}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    await bot.send_message(
        callback_query.from_user.id,
        f"üëâ **–ò –Ω–∞–∂–º–∏ '—Å—Ç–∞—Ä—Ç' –≤ –±–æ—Ç–µ:**\n{referral_link}"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    await callback_query.answer("‚úÖ –°—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 5 –¥—Ä—É–∑—å—è–º!", show_alert=False)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–ø—Ä–∞–≤–∏–ª" –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data == "invite:sent", state=SellStates)
async def invite_sent(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    data = await state.get_data()

    # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç—Å–∫–∞—è –≤–µ—Ç–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π ‚Äî –¥–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–æ–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    if data.get("with_agent") and data.get("discount") and data.get("trust_agent_invites"):
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ–ø—Ä–æ—Å–∏–º
        if not data.get("contact"):
            await SellStates.SELL_CONTACT_AGENT.set()
            await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):")
            await callback_query.answer("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
            return

        await state.update_data(invited=True)
        await finalize_and_send_to_moderation(user_id, state, invited=True)
        await callback_query.answer("–°–ø–∞—Å–∏–±–æ! –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        return

    # –ò–Ω–∞—á–µ (–≤–µ—Ç–∫–∞ –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏—á–µ—Å—Ç–≤–∞) ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Å—á—ë—Ç–æ–º
    if data.get("waiting_for_invites"):
        count = len(referral_invites.get(user_id, []))
        if count < 5:
            await bot.send_message(
                user_id,
                f"‚è≥ –ü–æ–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ {count}/5 –¥—Ä—É–∑–µ–π.\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –µ—â—ë {5 - count} –¥—Ä—É–∑—å—è–º.\n\n"
                f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ 5 –¥—Ä—É–∑–µ–π –ø–æ–¥–ø–∏—à—É—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∑–∞–ø—É—Å—Ç—è—Ç –±–æ—Ç–∞, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
            )
            await callback_query.answer(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count}/5")
            return

    # –ï—Å–ª–∏ –ø–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏–ª–∏ —ç—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Å—á—ë—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    await state.update_data(invited=True)
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –µ—Å—Ç—å
    if not data.get("contact"):
        await SellStates.SELL_CONTACT_AGENT.set()
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):")
        await callback_query.answer("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        return

    await finalize_and_send_to_moderation(user_id, state, invited=True)
    await callback_query.answer("–°–ø–∞—Å–∏–±–æ! –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

# –∏ –ø–æ—Å–ª–µ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω) –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é:
@dp.message_handler(state=SellStates, content_types=types.ContentTypes.TEXT)
async def generic_sell_text_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SellStates, –µ—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π handler.
    –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.
    """
    data = await state.get_data()
    current_state = await state.get_state()
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç (SELL_CONTACT_AGENT), –≤—ã—à–µ –µ—Å—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä, —Ç–∞–∫ —á—Ç–æ —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —Ä–µ–¥–∫–æ.
    # –í –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø—Ä–æ—Å—Ç–æ —Ä—É–≥–∞–µ–º—Å—è.
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ (–∫–Ω–æ–ø–∫–∏) –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî /reset.")

# =======================
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (–≤ MOD_CHAT_ID)
# =======================


async def finalize_and_send_to_moderation(user_id: int, state: FSMContext, invited: bool = False):
    """
    –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
    ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î
    """
    session = None
    try:
        data = await state.get_data()
        local_id = str(uuid.uuid4())

        # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –í –ë–î (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        session = SessionLocal()
        try:
            submission = Submission(
                id=local_id,
                user_id=user_id,
                type="sell",
                data=json.dumps(data),
                invited=invited,
                rejected_all=data.get("rejected_all", False),
                status="pending"
            )
            session.add(submission)
            session.commit()
            logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {local_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
        except Exception as db_error:
            session.rollback()
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
            await bot.send_message(
                user_id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        finally:
            if session is not None:
                session.close()

        # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –í –ü–ê–ú–Ø–¢–ò (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
        pending_submissions[local_id] = {
            "user_id": user_id,
            "data": data,
            "invited": invited,
            "type": "sell",
            "status": "pending"
        }

        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        preview_text = build_sell_preview(data)

        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ù–¢–ê–ö–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        user_contact = data.get("contact", "–ù–µ —É–∫–∞–∑–∞–Ω")
        with_agent = data.get("with_agent", False)

        if with_agent:
            preview_text += f"\n\nüë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {escape_html(user_contact)}"
            preview_text += f"\nü§ù <b>–ü–æ—Å—Ä–µ–¥–Ω–∏–∫:</b> {AGENT_CONTACT}"
        else:
            preview_text += f"\n\nüë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {escape_html(user_contact)}"

        if data.get("rejected_all"):
            preview_text += "\n\n‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ—Å—Ä–µ–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.</b>"

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        photos = data.get("photos", [])
        video = data.get("video")
        video_note = data.get("video_note")

        if photos or video:
            media_group = []
            for photo_id in photos[:10]:
                media_group.append(InputMediaPhoto(media=photo_id))
            if video and len(media_group) < 10:
                media_group.append(InputMediaVideo(media=video))

            if media_group:
                try:
                    await bot.send_media_group(MOD_CHAT_ID, media_group)
                    logger.info(f"‚úÖ –ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è {local_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")

        if video_note:
            try:
                await bot.send_video_note(MOD_CHAT_ID, video_note)
                logger.info(f"‚úÖ –í–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è {local_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        mod_kb = make_mod_inline(local_id)
        try:
            await bot.send_message(
                MOD_CHAT_ID,
                preview_text,
                reply_markup=mod_kb,
                parse_mode=ParseMode.HTML
            )
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {local_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            await bot.send_message(
                user_id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        table = data.get("table")
        if table:
            try:
                await bot.send_document(
                    MOD_CHAT_ID,
                    table,
                    caption="üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞"
                )
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è {local_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")

        # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
            "–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –∏ –æ–ø—É–±–ª–∏–∫—É–µ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            f"ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: <code>{local_id}</code>",
            parse_mode=ParseMode.HTML
        )

        # ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
        await state.finish()

        logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {local_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")

    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        try:
            await bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as send_error:
            logger.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {send_error}")
    finally:
        # ‚úÖ –í–°–ï–ì–î–ê –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        if session is not None:
            try:
                session.close()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –ë–î –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as close_error:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –ë–î: {close_error}")
# =======================
# BUY flow (–ø–æ–∫—É–ø–∫–∞)
# =======================

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
@dp.message_handler(state=BuyStates.BUY_BUDGET, content_types=types.ContentTypes.TEXT)
async def buy_budget(message: types.Message, state: FSMContext):
    await state.update_data(budget=message.text.strip())
    await BuyStates.BUY_CITY.set()
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ? (–ù–∞–ø–∏—à–∏—Ç–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)")


@dp.message_handler(state=BuyStates.BUY_CITY, content_types=types.ContentTypes.TEXT)
async def buy_city(message: types.Message, state: FSMContext):
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    await state.update_data(city=message.text.strip())
    await BuyStates.BUY_CATEGORY.set()


    kb = make_categories_keyboard(prefix="buycat")
    kb.row(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
        InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="nav:restart")
    )

    await message.answer(
        "–ö–∞–∫–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ? –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=kb
    )


@dp.callback_query_handler(lambda c: c.data.startswith("buycat:"), state=BuyStates.BUY_CATEGORY)
async def buy_category_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ–ø—ã—Ç."""
    cat_idx = callback_query.data.split(":")[1]
    await state.update_data(category_idx=cat_idx)

    await callback_query.message.edit_text("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ –±–∏–∑–Ω–µ—Å–µ? (–ù–∞–ø–∏—à–∏—Ç–µ –î–∞/–ù–µ—Ç –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –æ–ø—ã—Ç)")
    await BuyStates.BUY_EXPERIENCE.set()
    await callback_query.answer()


# =======================
# –ú–æ–¥–µ—Ä–∞—Ü–∏—è: Publish / Reject
# =======================


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("mod:publish:"))
async def mod_publish(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.
    ‚úÖ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    ‚úÖ –ü—É–±–ª–∏–∫—É–µ—Ç –≤ –∫–∞–Ω–∞–ª
    ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    session = None  # ‚úÖ –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ None
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º local_id –∏–∑ callback_data
        parts = callback_query.data.split(":")
        if len(parts) < 3:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        local_id = parts[2]
        submission = pending_submissions.get(local_id)

        if not submission:
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        session = SessionLocal()  # ‚úÖ –¢–µ–ø–µ—Ä—å session –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø

        try:
            # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            db_submission = session.query(Submission).filter(
                Submission.id == local_id
            ).first()

            if not db_submission:
                await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                return

            db_submission.status = "published"
            session.commit()
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {local_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'published' –≤ –ë–î")

        except Exception as db_error:
            session.rollback()
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {db_error}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î")
            return
        finally:
            session.close()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–µ—Å—Å–∏—é

        # ‚úÖ –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        if submission["type"] == "sell":
            try:
                await publish_sell(submission)
                logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {local_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª")
            except Exception as pub_error:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {local_id}: {pub_error}")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
                return

        elif submission["type"] == "buy":
            await callback_query.answer("‚ö†Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª.")
            return

        # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞/–ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        user_id = submission.get("user_id")
        if user_id:
            try:
                await bot.send_message(
                    user_id,
                    "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. "
                    "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.",
                    parse_mode=ParseMode.HTML
                )
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as msg_error:
                logger.exception(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {msg_error}")

        # ‚úÖ –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏ (pending_submissions)
        pending_submissions.pop(local_id, None)
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ {local_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ pending_submissions")

        # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await callback_query.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –∑–∞—è–≤–∫—É {local_id}")

    except ValueError as ve:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {ve}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {callback_query.data}: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        # ‚úÖ –í–°–ï–ì–î–ê –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞)
        if session is not None:  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ session –Ω–µ None
            try:
                session.close()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –ë–î –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as close_error:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –ë–î: {close_error}")
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("mod:reject:"))
async def mod_reject(callback_query: types.CallbackQuery):
    try:
        _, _, local_id = callback_query.data.split(":")
        submission = pending_submissions.get(local_id)
        if not submission:
            await callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        mod_id = callback_query.from_user.id
        mod_rejection_state[mod_id] = local_id

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ FSMContext –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        state_proxy = dp.current_state(chat=mod_id, user=mod_id)
        await state_proxy.set_state(ModStates.MOD_REASON.state)

        await bot.send_message(mod_id, f"–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {local_id}:")
        await callback_query.answer("–û–∂–∏–¥–∞—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ reject: %s", e)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞


@dp.message_handler(state=ModStates.MOD_REASON, content_types=types.ContentTypes.TEXT)
async def mod_reason_input(message: types.Message, state: FSMContext):
    mod_id = message.from_user.id
    reason = message.text.strip()

    # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"[MOD_REASON] –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {mod_id} –≤–≤—ë–ª –ø—Ä–∏—á–∏–Ω—É: {reason[:50]}...")

    local_id = mod_rejection_state.get(mod_id)
    if not local_id:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()
        return

    submission = pending_submissions.get(local_id)
    if not submission:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.finish()
        mod_rejection_state.pop(mod_id, None)
        return

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            submission["user_id"],
            f"‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n\nüìù –ü—Ä–∏—á–∏–Ω–∞:\n{reason}"
        )
        logger.info(f"[MOD_REASON] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {submission['user_id']}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {submission['user_id']}: {e}")

    # ‚úÖ –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    pending_submissions.pop(local_id, None)
    mod_rejection_state.pop(mod_id, None)

    # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ {local_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    # ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    await state.finish()

@dp.message_handler(state=BuyStates.BUY_EXPERIENCE)
async def buy_experience_handler(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—ã—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç."""
    await state.update_data(experience=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username).")
    await BuyStates.BUY_PHONE.set()



@dp.message_handler(state=BuyStates.BUY_PHONE)
async def buy_contact_handler(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–æ–ø—Ä–æ—Å—É –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–≤—è–∑–∏."""
    await state.update_data(contact=message.text)
    await BuyStates.BUY_WHEN_CONTACT.set()
    await message.answer(
        "–ö–æ–≥–¥–∞ –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è?",
        reply_markup=make_back_restart_keyboard()
    )

@dp.message_handler(state=BuyStates.BUY_WHEN_CONTACT)
async def buy_when_contact_handler(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—è–≤–∫—É."""
    await state.update_data(when_contact=message.text.strip())
    user_data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    preview_text = build_buy_preview(user_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    try:
        await bot.send_message(MOD_CHAT_ID, preview_text, parse_mode=ParseMode.HTML)
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
            reply_markup=make_restart_only_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=make_restart_only_keyboard()
        )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    await state.finish()
# =======================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =======================
from aiogram import executor

from db import engine, SessionLocal, Base
from models import Submission


# =======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =======================


def build_sell_preview(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
    title = escape_html(data.get("title", ""))
    profit = format_number(data.get("profit", ""))
    city = escape_html(data.get("city", ""))
    price = format_number(data.get("price", ""))
    category = CATEGORIES.get(data.get("category_idx", ""), "")

    text = (
        f"<b>üìå {title}</b>\n\n"
        f"üí∞ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {profit} ‚ÇΩ\n"
        f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} ‚ÇΩ\n"
        f"üìç <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
        f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
    )

    if data.get("marketing"):
        text += f"\nüì¢ <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥:</b> {escape_html(data.get('marketing'))}\n"

    if data.get("employees"):
        text += f"\nüë• <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:</b> {escape_html(data.get('employees'))}\n"

    if data.get("premises"):
        text += f"\nüè¢ <b>–ü–æ–º–µ—â–µ–Ω–∏–µ:</b> {escape_html(data.get('premises'))}\n"

    if data.get("included"):
        text += f"\nüì¶ <b>–í—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {escape_html(data.get('included'))}\n"

    if data.get("extra"):
        text += f"\nüìù <b>–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {escape_html(data.get('extra'))}\n"

    return text

def build_buy_preview(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
    budget = escape_html(data.get("budget", ""))
    city = escape_html(data.get("city", ""))
    category = CATEGORIES.get(data.get("category_idx", ""), "")
    experience = escape_html(data.get("experience", ""))
    contact = escape_html(data.get("contact", ""))
    when_contact = escape_html(data.get("when_contact", ""))

    text = (
        f"<b>üîç –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ü–û–ö–£–ü–ö–£</b>\n\n"
        f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {budget}\n"
        f"üìç <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
        f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        f"üìö <b>–û–ø—ã—Ç:</b> {experience}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact}\n"
        f"‚è∞ <b>–ö–æ–≥–¥–∞ —Å–≤—è–∑–∞—Ç—å—Å—è:</b> {when_contact}\n"
    )

    return text


def make_agent_discount_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞: —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ —Å–∫–∏–¥–∫—É –∏–ª–∏ –Ω–µ—Ç"""
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É", callback_data="agent:will_invite"),
        InlineKeyboardButton("‚ùå –ë–µ–∑ —Å–∫–∏–¥–∫–∏", callback_data="agent:no_discount")
    )
    return kb


def make_noagent_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞: –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è"""
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data="noagent:will_invite"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", callback_data="noagent:decline")
    )
    return kb


def make_agent_invite_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="invite:copy"),
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª", callback_data="invite:sent")
    )
    return kb


async def publish_sell(submission: dict):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –≤ –∫–∞–Ω–∞–ª.
    """
    try:
        data = submission.get("data", {})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        preview_text = build_sell_preview(data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        photos = data.get("photos", [])
        video = data.get("video")
        video_note = data.get("video_note")

        if photos or video:
            media_group = []
            for photo_id in photos[:10]:
                media_group.append(InputMediaPhoto(media=photo_id))
            if video and len(media_group) < 10:
                media_group.append(InputMediaVideo(media=video))

            if media_group:
                await bot.send_media_group(CHANNEL_ID, media_group)

        if video_note:
            await bot.send_video_note(CHANNEL_ID, video_note)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url="https://t.me/goodbiz54"))

        await bot.send_message(
            CHANNEL_ID,
            preview_text,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )

        logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        raise

if __name__ == "__main__":
    executor.start_polling(
        dispatcher=dp,
        startup=init_db,
    )